# -*- coding: utf-8 -*-
"""Instagram post and suggest image.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1lAHxccTyNOqOYghCgGVTzHXskQhBjVkb

https://towardsdatascience.com/agentic-ai-103-building-multi-agent-teams/
"""



# Imports
import os
from textwrap import dedent
from agno.agent import Agent
from agno.models.google import Gemini
from agno.team import Team
from agno.models.google import Gemini
from agno.tools.duckduckgo import DuckDuckGoTools
from agno.tools.file import FileTools
from pathlib import Path
from google import genai
from google.genai import types
from google.generativeai.types import GenerationConfig
from PIL import Image
from io import BytesIO
import base64

# Create individual specialized agents
writer = Agent(
    name="Writer",
    role=dedent("""\
                You are an experienced digital marketer who specializes in Instagram posts.
                You know how to write an engaging, SEO-friendly post.
                You know all about wine, cheese, and gourmet foods found in grocery stores.
                You are also a wine sommelier who knows how to make recommendations.
                \
                """),
    description=dedent("""\
                Write clear, engaging content using a neutral to fun and conversational tone.
                Write an Instagram caption about the requested {topic}.
                Write a short call to action at the end of the message.
                Add 5 hashtags to the caption.
                If you encounter a character encoding error, remove the character before sending your response to the Coordinator.
                        \
                        """),
    tools=[DuckDuckGoTools()],
    add_name_to_instructions=True,
    expected_output=dedent("Caption for Instagram about the {topic}."),
    model=Gemini(id="gemini-2.0-flash-lite", api_key=os.environ.get("GEMINI_API_KEY")),
    exponential_backoff=True,
    delay_between_retries=2
)

# Illustrator Agent
illustrator = Agent(
    name="Illustrator",
    role="You are an illustrator who specializes in pictures of wines, cheeses, and fine foods found in grocery stores.",
    description=dedent("""\
                Based on the caption created by Marketer, create a prompt to generate an engaging photo about the requested {topic}.
                If you encounter a character encoding error, remove the character before sending your response to the Coordinator.
                \
                """),
    expected_output= "Prompt to generate a picture.",
    add_name_to_instructions=True,
    model=Gemini(id="gemini-2.0-flash", api_key=os.environ.get("GEMINI_API_KEY")),
    exponential_backoff=True,
    delay_between_retries=2
)

# Create a team with these agents
writing_team = Team(
    name="Instagram Team",
    mode="coordinate",
    members=[writer, illustrator],
    instructions=dedent("""\
                        You are a team of content writers working together to create engaging Instagram posts.
                        First, you ask the 'Writer' to create a caption for the requested {topic}.
                        Next, you ask the 'Illustrator' to create a prompt to generate an engaging illustration for the requested {topic}.
                        Do not use emojis in the caption.
                        If you encounter a character encoding error, remove the character before saving the file.
                        Use the following template to generate the output and the generate output must come at the line after the line temnplate:
                        - Post
                        - Prompt to generate an illustration:
                        \
                        """),
    model=Gemini(id="gemini-2.0-flash", api_key=os.environ.get("GEMINI_API_KEY")),
    tools=[FileTools(base_dir=Path("./output"))],
    expected_output="A text named 'post.txt' with the content of the Instagram post and the prompt to generate an picture.",
    share_member_interactions=True,
    markdown=True,
    monitoring=True
)

# Prompt
prompt = "Write a post about: Wine and sugestion of food to accompany."

import os
from dotenv import load_dotenv

load_dotenv()

# Get the API key from the environment variable
api_key = os.getenv("GEMINI_API_KEY")
if not api_key:
    raise ValueError("GEMINI_API_KEY not found in environment variables. Please set it in a .env file or as an environment variable.")

# Run the team with a task
writing_team.print_response(prompt)

def extract_prompt_from_file(file_path: str, marker: str) -> str:
    with open(file_path, 'r', encoding='utf-8') as file:
        lines = file.readlines()

    for idx, line in enumerate(lines):
        if marker in line:
            # Retorna a linha seguinte como prompt
            if idx + 1 < len(lines):
                return lines[idx + 1].strip()
    return ""

# Caminho do arquivo e marcador
file_path = "output/post.txt"
marker = "- Prompt to generate an illustration:"

# Extrai o prompt
prompt = extract_prompt_from_file(file_path, marker)
print("Prompt extraído:", prompt)

client = genai.Client()

prompt = extract_prompt_from_file(file_path, marker)
print(prompt)

# Para uso do modelo gemini-2.0-flash-preview-image-generation
# <-- começo
# response = client.models.generate_content(
#     model="gemini-2.0-flash-preview-image-generation",
#     contents=prompt,
#     config=types.GenerateContentConfig(
#       response_modalities=['TEXT', 'IMAGE']
#     )
# )

# for part in response.candidates[0].content.parts:
#   if part.text is not None:
#     print(part.text)
#   elif part.inline_data is not None:
#     image = Image.open(BytesIO((part.inline_data.data)))
#     image.save('gemini-native-image.png')
#     image.show()

# --> fim

response = client.models.generate_images(
    model="imagen-4.0-ultra-generate-preview-06-06",
    prompt=prompt,
    config=types.GenerateImagesConfig(
        number_of_images=1,
        aspect_ratio="16:9",
        safety_filter_level="BLOCK_LOW_AND_ABOVE", # Corrected safety level
        person_generation="ALLOW_ADULT"
    )
)

# print(response)


prefixo="imagem_salva"

for chave, valor in response:
    if chave == "generated_images" and isinstance(valor, list):
        for i, imagem_obj in enumerate(valor):
            try:
                bytes_imagem = imagem_obj.image.image_bytes
                imagem = Image.open(BytesIO(bytes_imagem))
                nome_arquivo = f"{prefixo}_{i}.png"
                imagem.save(nome_arquivo)
                print(f"✅ Imagem salva: {nome_arquivo}")
            except Exception as e:
                print(f"❌ Erro ao salvar imagem {i}: {str(e)}")


# for i, item in enumerate(response):
#     print(f"Item {i} → Tipo: {type(item)}")
#     print(f"Conteúdo: {str(item)[:100]}...")

# for model in client.models.list():
#     print(model.name)